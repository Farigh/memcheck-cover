######
# Memcheck-cover configuration values.
# Each violation criticality can be set to one of those values:
#    - warning
#    - error
# Case does not matter.
######

# Criticality for the following violation type:
#    Syscall param write(buf) contains unaddressable byte(s)
memcheck_violation_criticality['contains_unaddressable']="error"

# Criticality for the following violation type:
#    Syscall param exit_group(status) contains uninitialised byte(s)
memcheck_violation_criticality['contains_uninitialized']="error"

# Criticality for the following violation type:
#    Invalid free() / delete / delete[] / realloc()
memcheck_violation_criticality['dealloc_invalid']="warning"

# Criticality for the following violation type:
#    Mismatched free() / delete / delete []
memcheck_violation_criticality['dealloc_mismatched']="warning"

# Criticality for the following violation type:
#    4 bytes in 1 blocks are definitely lost in loss record 1 of 1
memcheck_violation_criticality['definitely_lost']="error"

# Criticality for the following violation type:
#    Argument 'size' of function malloc has a fishy (possibly negative) value: -1
memcheck_violation_criticality['fishy_argument_value']="warning"

# Criticality for the following violation type:
#    Invalid read of size 8
memcheck_violation_criticality['invalid_read']="error"

# Criticality for the following violation type:
#    Invalid write of size 4
memcheck_violation_criticality['invalid_write']="error"

# Criticality for the following violation type:
#    Syscall param read(buf) points to unaddressable byte(s)
memcheck_violation_criticality['points_to_unaddressable']="error"

# Criticality for the following violation type:
#    Syscall param write(buf) points to uninitialised byte(s)
memcheck_violation_criticality['points_to_uninitialized']="error"

# Criticality for the following violation type:
#    Conditional jump or move depends on uninitialised value(s)
memcheck_violation_criticality['uninitialized_value_jump_move']="warning"

# Criticality for the following violation type:
#    Use of uninitialised value of size 8
memcheck_violation_criticality['uninitialized_value_use']="warning"


######
# The following configuration values changes the level of **client check request** valgrind's report.
# Such checks are provided by valgrind's header <memcheck.h>
# (see: https://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs)
######

# Criticality for the following violation type:
#    Unaddressable byte(s) found during client check request
memcheck_client_check_criticality['unaddressable_found']="error"

# Criticality for the following violation type:
#    Uninitialised byte(s) found during client check request
memcheck_client_check_criticality['uninitialised_found']="error"


######
# The following configuration values changes the level of valgrind's report
# LEAK SUMMARY section.
######

# Criticality for the following leak summary type: definitely lost: 4 bytes in 1 blocks
memcheck_summary_criticality['definitely_lost']="error"

# Criticality for the following leak summary type: indirectly lost: 4 bytes in 1 blocks
memcheck_summary_criticality['indirectly_lost']="error"

# Criticality for the following leak summary type: possibly lost: 4 bytes in 1 blocks
memcheck_summary_criticality['possibly_lost']="error"

# Criticality for the following leak summary type: still reachable: 4 bytes in 1 blocks
memcheck_summary_criticality['still_reachable']="error"
