######
# Memcheck-cover configuration values.
# Each violation criticality can be set to one of those values:
#    - warning
#    - error
# Case does not matter.
######
#===========================
#=== Criticality options ===
#===========================

# Criticality for the following violation type:
#    Syscall param write(buf) contains unaddressable byte(s)
memcheck_violation_criticality['contains_unaddressable']="error"

# Criticality for the following violation type:
#    Syscall param exit_group(status) contains uninitialised byte(s)
memcheck_violation_criticality['contains_uninitialized']="error"

# Criticality for the following violation type:
#    Invalid free() / delete / delete[] / realloc()
memcheck_violation_criticality['dealloc_invalid']="warning"

# Criticality for the following violation type:
#    Mismatched free() / delete / delete []
memcheck_violation_criticality['dealloc_mismatched']="warning"

# Criticality for the following violation type:
#    4 bytes in 1 blocks are definitely lost in loss record 1 of 1
memcheck_violation_criticality['definitely_lost']="error"

# Criticality for the following violation type:
#    Argument 'size' of function malloc has a fishy (possibly negative) value: -1
memcheck_violation_criticality['fishy_argument_value']="warning"

# Criticality for the following violation type:
#    Illegal memory pool address
memcheck_violation_criticality['illegal_mem_pool_addr']="error"

# Criticality for the following violation type:
#    48 bytes in 1 blocks are indirectly lost in loss record 1 of 2
memcheck_violation_criticality['indirectly_lost']="error"

# Criticality for the following violation type:
#    Invalid read of size 8
memcheck_violation_criticality['invalid_read']="error"

# Criticality for the following violation type:
#    Invalid write of size 4
memcheck_violation_criticality['invalid_write']="error"

# Criticality for the following violation type:
#    Jump to the invalid address stated on the next line
memcheck_violation_criticality['jump_to_invalid_addr']="error"

# Criticality for the following violation type:
#    Block 0x1fff0002d0..0x1fff0003cf overlaps with block 0x1fff0002d2..0x1fff0002db
memcheck_violation_criticality['overlapping_mem_pool_blocks']="error"

# Criticality for the following violation type:
#    Source and destination overlap in strncpy(0x1fff000375, 0x1fff000389, 21)
memcheck_violation_criticality['overlapping_src_dest']="error"

# Criticality for the following violation type:
#    Syscall param read(buf) points to unaddressable byte(s)
memcheck_violation_criticality['points_to_unaddressable']="error"

# Criticality for the following violation type:
#    Syscall param write(buf) points to uninitialised byte(s)
memcheck_violation_criticality['points_to_uninitialized']="error"

# Criticality for the following violation type:
#    6 bytes in 1 blocks are possibly lost in loss record 1 of 1
memcheck_violation_criticality['possibly_lost']="warning"

# Criticality for the following violation type:
#    10 bytes in 1 blocks are still reachable in loss record 1 of 1
memcheck_violation_criticality['still_reachable']="error"

# Criticality for the following violation type:
#    Conditional jump or move depends on uninitialised value(s)
memcheck_violation_criticality['uninitialized_value_jump_move']="warning"

# Criticality for the following violation type:
#    Use of uninitialised value of size 8
memcheck_violation_criticality['uninitialized_value_use']="warning"


######
# The following configuration values changes the level of **client check request** valgrind's report.
# Such checks are provided by valgrind's header <memcheck.h>
# (see: https://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs)
######

# Criticality for the following violation type:
#    Unaddressable byte(s) found during client check request
memcheck_client_check_criticality['unaddressable_found']="error"

# Criticality for the following violation type:
#    Uninitialised byte(s) found during client check request
memcheck_client_check_criticality['uninitialised_found']="error"


######
# The following configuration values changes the level of valgrind's report
# LEAK SUMMARY section.
######

# Criticality for the following leak summary type: definitely lost: 4 bytes in 1 blocks
memcheck_summary_criticality['definitely_lost']="error"

# Criticality for the following leak summary type: indirectly lost: 4 bytes in 1 blocks
memcheck_summary_criticality['indirectly_lost']="error"

# Criticality for the following leak summary type: possibly lost: 4 bytes in 1 blocks
memcheck_summary_criticality['possibly_lost']="warning"

# Criticality for the following leak summary type: still reachable: 4 bytes in 1 blocks
memcheck_summary_criticality['still_reachable']="error"


#===========================
#===  Advanced options   ===
#===========================

###
# Prefix replacement can be applied to remove or replace paths prefixes
# It can be defined by filling the following map:
#    memcheck_path_prefix_replacement["<prefix_to_replace>"]="<replacement_value>"
# Where the key 'prefix_to_replace' is the path's prefix to be replaced
# And the value 'replacement_value' is the replacing value (it can be left empty to remove the prefix completly)
#
# For example, setting:
#    memcheck_path_prefix_replacement["/var/user/repo"]="<repo>"
# Would convert the following report line:
#    ==1==    at 0x10101042: myFunc() (/var/user/repo/src/lib1/MyClass.cpp:14)
# To:
#    ==1==    at 0x10101042: myFunc() (<repo>/src/lib1/MyClass.cpp:14)
#
# Multiple replacements can be defined


###
# Source control server links can be added based on paths prefixes
# It can be defined by filling the following map:
#    memcheck_url_prefix_replacement["<prefix_to_consider>"]="<replacement_value>"
# Where the key 'prefix_to_consider' is the path's prefix that should be replaced
# with the provided link prefix for the link
# And the value 'replacement_value' is the source control server link prefix
#
# It's advised to set a link prefix pointing to a specific commit sha1 instead of a
# branch so the links would always points to a meaningful line.
#
# Since the syntax is not the same for every source control web servers,
# the target server type must be specified for each <prefix_to_consider> using
# the following parameter:
#     memcheck_url_prefix_replacement_type["<prefix_to_consider>"]="<type>"
#
# For now, the following <type> are supported (case does not matter):
#    - GitHub
#    - GitLab
#    - BitBucket
#
# For example, setting:
#    memcheck_url_prefix_replacement["/var/user/repo"]="http://github.com/example/example_project/blob/master/"
#    memcheck_url_prefix_replacement_type["/var/user/repo"]="github"
# Would convert the following report line:
#    ==1==    at 0x10101042: myFunc() (/var/user/repo/src/lib1/MyClass.cpp:14)
# To:
#    ==1==    at 0x10101042: myFunc() (<a href="http://github.com/example/example_project/blob/master/src/lib1/MyClass.cpp#L14">/var/user/repo/src/lib1/MyClass.cpp:14</a>)
#
# Multiple replacements can be defined

